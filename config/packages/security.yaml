security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    #main:
    #    lazy: true
    #    provider: app_user_provider

    login:
      pattern: ^/api/login
      stateless: true
      user_checker: App\Security\CustomUserChecker
      json_login:
        check_path: /api/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        provider: app_user_provider

      logout:
        path: api_token_invalidate
      remember_me:
        secret: "%kernel.secret%"
        lifetime: 604800 # 1 semaine

    register:
      pattern: ^/api/register
      stateless: true
      security: false

    confirm_email:
      pattern: ^/api/confirm-email/{token}
      stateless: true
      security: false

    reset_password:
      pattern: ^/api/reset-password
      stateless: true
      security: false

    reset_password_from_link:
      pattern: ^/api/reset-password/{token}
      stateless: true
      security: false

    api:
      pattern: ^/api
      stateless: true
      jwt: ~
      refresh_jwt:
        check_path: /api/token/refresh
      entry_point: jwt

  access_control:
    - { path: ^/api/product/\d+/reviews, roles: PUBLIC_ACCESS, methods: ['GET'] }
    - { path: ^/api/product/\d+/reviews, roles: ROLE_USER, methods: ['POST'] }
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/new-products, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/product, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/subtype, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/type, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/popular-products, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/register, roles: PUBLIC_ACCESS, methods: [POST] }
    - { path: ^/api/confirm-email, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
    - { path: ^/api/reset_password, roles: PUBLIC_ACCESS, methods: [GET, POST] }
    - { path: ^/api/delete-account, roles: [ROLE_USER], methods: [DELETE] }
    - { path: ^/api/modify-account, roles: [ROLE_USER], methods: [PUT] }
    - { path: ^/api/logout, roles: [ROLE_USER], methods: [GET] }
    - { path: ^/api/(login|token/refresh), roles: [ROLE_USER], methods: [POST] }
    # - { path: ^/api/update-cart, roles: [ROLE_USER], methods: [POST] }
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/admin, roles: [ROLE_ADMIN] }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
